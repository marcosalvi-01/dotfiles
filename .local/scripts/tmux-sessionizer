#!/bin/dash
# Function to guess if something is a git URL
is_git_url() {
    input=$1
    case "$input" in
        git@*.git|http://*.git|https://*.git|ssh://*.git)
            return 0 ;;
        *)
            return 1 ;;
    esac
}

# If exactly one argument is provided, use it (with tilde expansion)
if [ "$#" -eq 1 ]; then
    case "$1" in
        ~*)
            # Replace a leading tilde with $HOME
            selected="$HOME${1#\~}" ;;
        *)
            selected="$1" ;;
    esac
    query=""
else
    # Define known directories as newline-separated entries: path:icon label
    known_dirs="$HOME/dotfiles: dotfiles
    $HOME/note: note
    $HOME: home
    $HOME/Downloads: downloads
    $HOME/Desktop:󰇄 desktop
    $HOME/Music: music
    $HOME/Documents:󰈙 documents
    $HOME/Pictures: pictures"

    fzf_output=$(
        (
            # Print known directories that exist
            echo "$known_dirs" | while IFS= read -r entry; do
                dir=${entry%%:*}
                if [ -d "$dir" ]; then
                    printf "%s\n" "$entry"
                fi
            done

            # Print top-level directories in HOME (excluding hidden)
            for dir in "$HOME"/*; do
                if [ -d "$dir" ]; then
                    case "$dir" in
                        "$HOME"/*)
                            home_prefix=$HOME
                            display_dir="~${dir#"$home_prefix"}" ;;
                        *)
                            display_dir="$dir" ;;
                    esac
                    printf "%s:%s\n" "$dir" "$display_dir"
                fi
            done
        ) | awk -F: '!seen[$1]++' | fzf \
            --print-query \
            --delimiter=: \
            --with-nth=2 \
            --preview 'eza --icons=always --color=always --oneline {1}'
    )

    # Read the query (typed text) and the selected line
    query=$(printf "%s\n" "$fzf_output" | sed -n '1p')
    displayed=$(printf "%s\n" "$fzf_output" | sed -n '2p')

    if [ -z "$displayed" ]; then
        # No selection from fzf
        if [ -n "$query" ]; then
            # Check if query is a git URL
            if is_git_url "$query"; then
                repo_name=$(basename "$query")
                repo_name=${repo_name%.git}
                if git clone "$query" "$HOME/$repo_name"; then
                    selected="$HOME/$repo_name"
                else
                    printf "Failed to clone repository. Exiting.\n"
                    exit 1
                fi
            else
                # Create a new directory under HOME
                case "$query" in
                    ~*)
                        selected="$HOME${query#\~}" ;;
                    *)
                        selected="$query" ;;
                esac
                selected="$HOME/$selected"
                mkdir -p "$selected"
            fi
        else
            # No query and no selection means user cancelled
            exit 0
        fi
    else
        # Extract the real directory from before the colon
        selected=$(printf "%s\n" "$displayed" | cut -d: -f1)
    fi
fi

selected_name=$(basename "$selected" | tr ".,: " "____")

switch_to() {
    if [ -z "$TMUX" ]; then
        tmux attach-session -t "$selected_name"
    else
        tmux switch-client -t "$selected_name"
    fi
}

if tmux has-session -t "$selected_name" 2>/dev/null; then
    switch_to
else
    tmux new-session -ds "$selected_name" -c "$selected"
    tmux send-keys -t "$selected_name" "ready-tmux" Enter
    switch_to
fi

