#!/usr/bin/env bash

# Function to guess if something is a git URL
is_git_url() {
    local input="$1"
    # This is a simplistic check, you can refine it if needed:
    # Matches common git URLs like:
    # - git@github.com:user/repo.git
    # - https://github.com/user/repo.git
    # - http://...
    # - ssh://...
    # If you need a stricter check, you can refine this regex.
    [[ "$input" =~ ^(git@|https://|http://|ssh://).+\.git$ ]]
}

if [[ $# -eq 1 ]]; then
    # If a directory was provided as an argument, use that directly.
    selected=${1/#\~/$HOME}
    query=""
else
	# The directories indexed by fzf
	fzf_output=$(
		(
			echo "$HOME" | sed "s|^$HOME|ï€• home|" 
			find ~ -mindepth 1 -maxdepth 1 -type d -not -name ".*" | sed "s|^$HOME|~|"
		) | fzf --print-query
	)

    # Read the query (typed text) and the selected line
    query=$(echo "$fzf_output" | sed -n '1p')
    displayed=$(echo "$fzf_output" | sed -n '2p')

    if [[ -z "$displayed" ]]; then
        # No directory selected in fzf
        if [[ -n "$query" ]]; then
            # Check if query is a git URL
            if is_git_url "$query"; then
                # Extract the repo name (strip trailing .git if present)
                repo_name=$(basename "$query")
                repo_name="${repo_name%.git}"
                # Clone into home directory
                git clone "$query" "$HOME/$repo_name" && selected="$HOME/$repo_name"
                if [[ -z "$selected" ]]; then
                    echo "Failed to clone repository. Exiting."
                    exit 1
                fi
            else
                # Create a new directory under $HOME with the given query as name
                selected=${query/#\~/$HOME}
                selected="$HOME/$selected"
                mkdir -p "$selected"
            fi
        else
            # No query and no selection means user cancelled
            exit 0
        fi
    else
        # Convert back from ~ to $HOME
        selected=${displayed/#\~/$HOME}
    fi
fi

# Normalize the session name
selected_name=$(basename "$selected" | tr ".,: " "____")

switch_to() {
    if [[ -z "$TMUX" ]]; then
        tmux attach-session -t "$selected_name"
    else
        tmux switch-client -t "$selected_name"
    fi
}

if tmux has-session -t="$selected_name" 2>/dev/null; then
    switch_to
else
    tmux new-session -ds "$selected_name" -c "$selected"
    switch_to

    tmux send-keys -t "$selected_name" "ready-tmux" Enter
fi

